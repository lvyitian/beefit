// based largely on Joshua Haberman's jitdemo
// https://github.com/haberman/jitdemo/blob/master/jit3.dasc

|.arch x64
|.actionlist actionlist
|
|.define PTR, rbx
|.define TMP, al
|.define TMPE, rax
|
|.macro callp, addr
|  mov  rax, (uintptr_t)addr
|  call rax
|.endmacro

#define MAX_NESTING 256

void emit(dasm_State **Dst, ins_t *code) {
  size_t maxpc = 0;
  int pcstack[MAX_NESTING];
  int *top = pcstack;
  int *limit = pcstack + MAX_NESTING;
  int loop_count = 0;

  // prologue
  |  push PTR
  |  mov  PTR, rdi

  for (; code->op != OP_EOF; ++code) {
    switch (code->op) {
      case OP_ADD:
        if (code->a == 1)
          |  inc byte [PTR+code->b]
        else if (code->a == -1)
          |  dec byte [PTR+code->b]
        else if (code->a > 0)
          |  add byte [PTR+code->b], code->a
        else if (code->a < 0)
          |  sub byte [PTR+code->b], -code->a
        break;
      case OP_SHIFT:
        if (code->b == 1)
          |  inc PTR
        else if (code->b == -1)
          |  dec PTR
        else if (code->b > 0)
          |  add PTR, code->b
        else if (code->b < 0)
          |  sub PTR, -code->b
        break;
      case OP_SET:
        |  mov byte [PTR+code->b], code->a
        break;
      case OP_LOAD:
        |  mov  TMP, byte [PTR+code->b]
        if (code->a) {
          if (code->a == 1) {
            |  inc TMPE
          } else if (code->a == -1) {
            |  dec TMPE
          } else if (code->a > 0) {
            |  add TMP, code->a
          } else if (code->a < 0) {
            |  sub TMP, -code->a
          }
        }
        break;
      case OP_SETT:
        |  mov byte [PTR+code->b], TMP
        break;
      case OP_SETZ: {
          int off = code->b;
          int count = code->a;
          while (count >= 8) {
            |  mov qword [PTR+off], 0
            count -= 8;
            off += 8;
          }
          while (count--) {
            |  mov byte [PTR+off], 0
            off++;
          }
        }
      case OP_TADD:
        if (code->a & 0x80) {
          |  neg  TMPE
        }
        if (code->a & 0x7f) {
          int off = (int8_t)((code->a & 0x7f) | ((code->a & 0x40) << 1));
          if (off == 1) {
            |  inc TMPE
          } else if (off == -1) {
            |  dec TMPE
          } else if (off > 0) {
            |  add TMP, off
          } else if (off < 0) {
            |  sub TMP, -off
          }
        }
        |  add  TMP, byte [PTR+code->b]
        break;
      case OP_ADDT:
        {
          int8_t diff = code->a;
          if (diff < 0) {
            for (int i = 0; i > diff; i--) {
              | sub  [PTR+code->b], TMP
            }
          } else if (diff > 0) {
            for (int i = 0; i < diff; i++) {
              | add  [PTR+code->b], TMP
            }
          }
        }
        break;
      case OP_PRINT:
        |  movzx  rdi, byte [PTR+code->b]
        |  callp   &putchar
        break;
      case OP_READ:
        |  callp   &getchar
        |  mov    byte [PTR+code->b], al
        break;
      case OP_SKIPZ:
        if (top == limit) err("Nesting too deep.");
        // Each loop gets two pclabels: at the beginning and end.
        // We store pclabel offsets in a stack to link the loop
        // begin and end together.
        maxpc += 2;
        *top++ = maxpc;
        dasm_growpc(Dst, maxpc);
        if (!code->a) {
          |  cmp  byte [PTR], 0
          |  je   =>(maxpc-2)
        }
        |=>(maxpc-1):
        if (trace) {
          |   inc dword [(trace_counts+loop_count++)]
        }
        break;
      case OP_LOOPNZ:
        top--;
        if (!code->a) {
          |  cmp  byte [PTR], 0
          |  jne  =>(*top-1)
        }
        |=>(*top-2):
        break;
      case OP_NOP:
      case OP_EOF:
        break;
    }
  }

  // epilogue
  |  pop PTR
  |  ret
}
